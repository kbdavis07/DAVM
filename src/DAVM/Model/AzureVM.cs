using DAVM.Common;
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Net;
using System.Text;
using System.Threading.Tasks;

namespace DAVM.Model
{
	public enum RemoteConnectionType
	{
		RDP,
		SSH,
		None
	}

    public class AzureVM : AzureResource
    {
        public AzureVM(AzureSubscription owner)
        {
            Subscription = owner;
			RemoteConnectionPort = -1;
			Status = ResourceStatus.Unknown;
        }

        #region properties
        public override String ID { get { return this.DeploymentName + "_" + this.Name; } }

        public override String AzureResourceType
        {
            get { return "Virtual Machine"; }
        }

        public String DeploymentID
		{
			get;
			set;
		}
		public String DeploymentName
        {
            get;
            set;
        }

		public String _location;
		public String Location
		{
			get { return _location; }
			set
			{
				if (value != _location)
				{
					_location = value;
					RaisePropertyChanged("Location");
				}
			}
		}

		public String _os;
		public String OS
		{
			get { return _os; }
			set
			{
				if (value != _os)
				{
					_os = value;
					RaisePropertyChanged("OS");
				}
			}
		}

		public bool SupportRemoteConnection
		{
			get { return (Status == ResourceStatus.Running) && RemoteConnectionPort > 0 && !IsWorking; }
			set { }
		}

		public int RemoteConnectionPort
		{
			get; set;
		}

		private String _serviceName;
        public String ServiceName
		{
			get { return _serviceName; }
			set
			{
				if (value != _serviceName)
				{
					_serviceName = value;
					RaisePropertyChanged("ServiceName");
				}
			}
		}
		public RemoteConnectionType RemoteConnectionType { get; set; }

		private IPAddress _localIPAddress;
        public IPAddress LocalIPAddress
        {
            get { return _localIPAddress; }
            set
            {
                if (value != _localIPAddress)
                {
                    _localIPAddress = value;
                    RaisePropertyChanged("LocalIPAddress");
                }
            }
        }

		private IPAddress _publicIpAddress;
		public IPAddress PublicIPAddress
		{
			get { return _publicIpAddress; }
			set
			{
				if (value != _publicIpAddress)
				{
					_publicIpAddress = value;
					RaisePropertyChanged("PublicIPAddress");
				}
			}
		}

		private String _size;
        public String Size
        {
            get { return _size; }
            set
            {
                if (value != _size)
                {
                    _size = value;
                    RaisePropertyChanged("Size");
                }
            }
        }

		public String _resourceGroup;
		public String ResourceGroup
		{
			get { return _resourceGroup; }
			set
			{
				if (value != _resourceGroup)
				{
					_resourceGroup = value;
					RaisePropertyChanged("ResourceGroup");
				}
			}
		}

		public String _fqdn;
        public String FQDN
        {
            get { return _fqdn; }
            set
            {
                if (value != _fqdn)
                {
                    _fqdn = value;
                    RaisePropertyChanged("FQDN");
                }
            }
        }

      
		#endregion

		#region methods

		public override string GetVerboseDetails() {
			StringBuilder sb = new StringBuilder();
			sb.AppendFormat("[{0}]\n", Name);
			sb.AppendLine(String.Format("Status: {0}", Status));
			sb.AppendLine(String.Format("Service: {0}", ServiceName));
			sb.AppendLine(String.Format("Local IP: {0}", LocalIPAddress));
			sb.AppendLine(String.Format("Public IP: {0}", PublicIPAddress));
			sb.AppendLine(String.Format("Size: {0}", Size));
			sb.AppendLine(String.Format("FQDN: {0}", FQDN));
			sb.AppendLine(String.Format("RDP/SSH port: {0}", RemoteConnectionPort));
			sb.AppendLine(String.Format("OS: {0}", OS));
			sb.AppendLine(String.Format("Location: {0}", Location));
			sb.AppendLine(String.Format("Resource Group: {0}", ResourceGroup));
			sb.AppendLine(String.Format("Deployment ID: {0}", DeploymentID));
			sb.AppendLine(String.Format("Subscription ID: {0}", Subscription.ID));
			return sb.ToString();
		}
		#endregion
	}

	//for future improvements
	public class WindowsVM : AzureVM {
		public WindowsVM(AzureSubscription owner) : base(owner)
		{
		}

	}

	public class LinuxVM : AzureVM
	{
		public LinuxVM(AzureSubscription owner) : base(owner)
		{	
		}

	}

}

